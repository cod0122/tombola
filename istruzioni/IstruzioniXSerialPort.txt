1- SE NON FUNZIONA IL MOUNT ALLORA FARE QUELLO CHE STA SCRITTO NALLA CARTELLA TOMBOLA\JOB NEL FILE:

81-custom.rules


2- ISTRUZIONI PER EVITARE CHE LA SERIALE SIA 'DISTURBATA' DA LINUX

http://elinux.org/RPi_Serial_Connection

Preventing Linux using the serial port

The Broadcom UART appears as /dev/ttyAMA0 under Linux. There are several minor things in the way if you want to have dedicated control of the serial port on a Raspberry Pi.

UPDATE: There's now a nice little script to automate all the steps below, making them unnecessary. Read more about it here

Firstly, the kernel will use the port as controlled by kernel command line contained in 
/boot/cmdline.txt.

The file will look something like this:
(QUINDI INTERVENIRE SUL FILE: /boot/cmdline.txt ALLA RIGA INDICATA SOTTO)
dwc_otg.lpm_enable=0 console=ttyAMA0,115200 kgdboc=ttyAMA0,115200 console=tty1 root=/dev/mmcblk0p2 rootfstype=ext4 elevator=deadline rootwait

The console keyword outputs messages during boot, and the kgdboc keyword enables kernel debugging. 
You will need to remove all references to ttyAMA0. 
So, for the example above /boot/cmdline.txt, should contain:
(DEVE DIVENTARE COSI':)
dwc_otg.lpm_enable=0 console=tty1 root=/dev/mmcblk0p2 rootfstype=ext4 elevator=deadline rootwait

You must be root to edit this (e.g. use sudo nano /boot/cmdline.txt). 

Be careful doing this, as a faulty command line can prevent the system booting.

Secondly, after booting, a login prompt appears on the serial port. 
This is controlled by the following lines in 

(POI COMMENTARE LA RIGA IN INITTAB:)
/etc/inittab:
#Spawn a getty on Raspberry Pi serial line
T0:23:respawn:/sbin/getty -L ttyAMA0 115200 vt100
You will need to edit this file to comment out the second line, i.e.

#T0:23:respawn:/sbin/getty -L ttyAMA0 115200 vt100
Finally you will need to reboot the Pi for the new settings to take effect. Once this is done, you can use /dev/ttyAMA0 like any normal linux serial port, and you wont get any unwanted traffic confusing the attached devices.

The above instructions have been verified on Raspbian 'wheezy'; other distributions may be set up differently. To double-check, use

cat /proc/cmdline
to show the current kernel command line, and

ps aux | grep ttyAMA0
to search for getty processes using the serial port.

A tutorial on accessing the Pi's serial port from Python is available at Serial_port_programming:
http://elinux.org/Serial_port_programming

